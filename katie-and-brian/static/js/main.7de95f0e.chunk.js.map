{"version":3,"sources":["Components/Carousel.jsx","blocks/Intro.js","App.js","Components/Nav.jsx","Components/MasonryGrid.jsx","serviceWorker.js","index.js"],"names":["Carousel","images","adaptiveHeight","autoplay","class","dots","fade","infinite","speed","slidesToShow","slidesToScroll","map","img","key","alt","src","Intro","className","target","rel","href","to","MasonryGrid","brakePoints","this","props","breakPoints","image","id","Component","Tile","Masonry","state","columns","onResize","bind","window","addEventListener","w","reduceRight","p","c","i","length","getColumns","refs","offsetWidth","setState","col","numC","push","children","reduce","ref","mapChildren","ci","child","React","shuffle","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7de95f0e.chunk.js","sourcesContent":["import React from \"react\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport './Carousel.css';\n\nfunction Carousel({ images }) {\n    var settings = {\n        adaptiveHeight: true,\n        autoplay: true,\n        class: 'carousel',\n        dots: true,\n        fade: true,\n        infinite: true,\n        speed: 500,\n        slidesToShow: 1,\n        slidesToScroll: 1\n      };\n    return (\n        <Slider {...settings}>\n            {images.map(img => (\n                <div key={img}>\n                    <img alt={img} src={img} />\n                </div>\n            ))}\n        </Slider>\n    );\n}\n\nexport default Carousel;\n","import React, { Fragment } from \"react\";\nimport Carousel from '../Components/Carousel';\n\n\nfunction Intro() {\n    return (\n        <Fragment>\n            <header className=\"App-header\">\n                <h1>Katie and Brian</h1>\n            </header>\n            <Carousel\n                images={['./images/dance2.png', './images/photo-gallery/4.jpg', './images/heartWallKiss.png']}\n            />\n            <h4 className=\"date\">September 5, 2020 | <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=7tV2b6rpBYk\">Peachtree City, Georgia</a></h4>\n        </Fragment>\n    );\n}\n\nexport default Intro;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Intro from './blocks/Intro';\nimport Nav from './Components/Nav';\nimport './App.css';\nimport './Components/Nav';\nimport MasonryGrid from './Components/MasonryGrid';\nimport shuffle from 'shuffle-array';\n\n// example photo gallery images\nlet images = [];\nfor(let i = 0; i< 50; i++){\n\timages.push(`./images/photo-gallery/${i}.jpg`);\n}\n\nshuffle(images);\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Intro />\n          </Route>\n        </Switch>\n        <Nav />\n        <Switch>\n          <Route path=\"/photos\">\n            <MasonryGrid breakPoints={[350, 500, 750]} images={images} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport './Nav.css';\nimport { Link } from \"react-router-dom\";\n\nfunction Carousel() {\n    return (\n        <ul className=\"nav\">\n            <li className=\"navItem\">\n                <Link to=\"/our-story\">Our Story</Link>\n            </li>\n            <li className=\"navItem\">Event Info</li>\n            <li className=\"navItem\">Accomodations</li>\n            <li className=\"navItem\">Wedding Party</li>\n            <li className=\"navItem\">Registry</li>\n            <li className=\"navItem\">\n                <Link to=\"/photos\">Photos</Link>\n            </li>\n        </ul>\n    );\n}\n\nexport default Carousel;\n","/**\n * Code credited to https://codepen.io/golle404/pen/wWoXwz\n */\n\nimport React, { Component } from \"react\";\nimport './MasonryGrid.css';\n\nclass MasonryGrid extends Component {\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"masonry-container\">\n\t\t\t\t\t<Masonry brakePoints={this.props.breakPoints}>\n\t\t\t\t\t\t{this.props.images.map((image, id) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Tile src={image} />\n\t\t\t\t\t\t\t) \n\t\t\t\t\t\t})}\n\t\t\t\t\t</Masonry>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst Tile = ({src}) => {\n  return (\n    <div className=\"tile\">\n\t\t\t<img src={src} />\n\t\t</div>\n  );\n};\n\nclass Masonry extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {columns: 1};\n\t\tthis.onResize = this.onResize.bind(this);\n\t}\n\tcomponentDidMount(){\n\t\tthis.onResize();\n\t\twindow.addEventListener('resize', this.onResize)\t\n\t}\n\t\n\tgetColumns(w){\n\t\treturn this.props.brakePoints.reduceRight( (p, c, i) => {\n\t\t\treturn c < w ? p : i;\n\t\t}, this.props.brakePoints.length) + 1;\n\t}\n\t\n\tonResize(){\n\t\tconst columns = this.getColumns(this.refs.Masonry.offsetWidth);\n\t\tif(columns !== this.state.columns){\n\t\t\tthis.setState({columns: columns});\t\n\t\t}\n\t\t\n\t}\n\t\n\tmapChildren(){\n\t\tlet col = [];\n\t\tconst numC = this.state.columns;\n\t\tfor(let i = 0; i < numC; i++){\n\t\t\tcol.push([]);\n\t\t}\n\t\treturn this.props.children.reduce((p,c,i) => {\n\t\t\tp[i%numC].push(c);\n\t\t\treturn p;\n\t\t}, col);\n\t}\n\t\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"masonry\" ref=\"Masonry\">\n\t\t\t\t{this.mapChildren().map((col, ci) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"column\" key={ci} >\n\t\t\t\t\t\t\t{col.map((child, i) => {\n\t\t\t\t\t\t\t\treturn <div key={i} >{child}</div>\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default MasonryGrid;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}